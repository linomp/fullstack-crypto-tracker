{"version":3,"sources":["actions/types.js","reducers/tickValue.js","reducers/index.js","actions/store.js","actions/tickValue.js","components/LatestTicks.js","components/Historical.js","actions/mappers.js","App.js","reportWebVitals.js","index.js"],"names":["ACTION_TYPES","initialState","latest","historical","historicalHoursBack","reducers","combineReducers","tickValue","state","action","type","payload","store","createStore","compose","applyMiddleware","thunk","axios","defaults","headers","common","process","REACT_APP_GRIDA_KEY","baseUrl","symbolSortingFn","a","b","symbol","localeCompare","fetchHistorical","dispatch","hoursBack","getState","get","then","response","data","catch","e","console","log","mapActionToProps","fetchLatest","sort","actions","connect","values","useState","timeLeft","setTimeLeft","useEffect","timer","setTimeout","clearTimeout","Card","CardBody","CardTitle","tag","CardSubtitle","className","Table","map","market","i","lastTradeRate","length","updateInterval","hours","hist","mapped","Object","entries","name","close","toPrecision","options","chart","id","stroke","curve","width","grid","xaxis","lines","show","labels","series","height","Form","onSubmit","preventDefault","value","target","parseInt","window","alert","FormGroup","Label","for","Input","placeholder","Button","App","autoDismiss","Container","Row","noGutters","Col","xs","sm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a16bcd4.chunk.js","sourcesContent":["export const ACTION_TYPES = {\r\n    FETCH_LATEST: \"FETCH_LATEST\",\r\n    FETCH_HISTORICAL: \"FETCH_HISTORICAL\",\r\n    UPDATE_INTERVAL: \"UPDATE_INTERVAL\"\r\n}","import { ACTION_TYPES } from \"../actions/types\"\r\n\r\nconst initialState = {\r\n    latest: [],\r\n    historical: {},\r\n    historicalHoursBack: 6\r\n}\r\n\r\nexport const tickValue = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.FETCH_LATEST:\r\n            return { ...state, latest: [...action.payload] }\r\n\r\n        case ACTION_TYPES.FETCH_HISTORICAL:\r\n            return { ...state, historical: action.payload }\r\n\r\n        case ACTION_TYPES.UPDATE_INTERVAL:\r\n            return { ...state, historicalHoursBack: action.payload }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import { combineReducers } from \"redux\"\r\nimport { tickValue } from \"./tickValue\"\r\n\r\nexport const reducers = combineReducers({ tickValue })","import { applyMiddleware, createStore, compose } from \"redux\"\r\n\r\nimport thunk from \"redux-thunk\"\r\n\r\nimport { reducers } from \"../reducers\"\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    compose(\r\n        applyMiddleware(thunk)\r\n    )\r\n)","import axios from 'axios'\r\nimport { store } from './store';\r\n\r\nimport { ACTION_TYPES } from \"./types\"\r\nimport { latest, historical } from \"../fixtures/data\"\r\n\r\nconst DEV_SKIP_REQUESTS = false;\r\nconst LOCAL_BACKEND = false;\r\n\r\naxios.defaults.headers.common['x-cors-grida-api-key'] = process.env.REACT_APP_GRIDA_KEY // for all requests\r\n\r\nconst baseUrl = LOCAL_BACKEND ? \"http://localhost:5000/api\" : \"https://cors.bridged.cc/http://165.227.107.127:5000/api\"\r\n\r\nconst symbolSortingFn = function (a, b) {\r\n    try {\r\n        return a.symbol.localeCompare(b.symbol);\r\n    } catch {\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport const fetchLatest = () => dispatch => {\r\n    if (DEV_SKIP_REQUESTS) {\r\n        return dispatch({\r\n            type: ACTION_TYPES.FETCH_LATEST,\r\n            payload: latest.sort(symbolSortingFn)\r\n        })\r\n    }\r\n    axios.get(`${baseUrl}/Ticks`)\r\n        .then(response =>\r\n            dispatch({\r\n                type: ACTION_TYPES.FETCH_LATEST,\r\n                payload: response.data.sort(symbolSortingFn)\r\n            }))\r\n        .catch(e => console.log(e))\r\n}\r\n\r\nexport const fetchHistorical = () => dispatch => {\r\n    if (DEV_SKIP_REQUESTS) {\r\n        return dispatch({\r\n            type: ACTION_TYPES.FETCH_HISTORICAL,\r\n            payload: historical\r\n        })\r\n    }\r\n\r\n    const hoursBack = store.getState().tickValue.historicalHoursBack\r\n    axios.get(`${baseUrl}/History?hoursBack=${hoursBack}`)\r\n        .then(response =>\r\n            dispatch({\r\n                type: ACTION_TYPES.FETCH_HISTORICAL,\r\n                payload: response.data\r\n            }))\r\n        .catch(e => console.log(e))\r\n}\r\n\r\n\r\nexport const updateInterval = (hours) => dispatch => {\r\n    dispatch({\r\n        type: ACTION_TYPES.UPDATE_INTERVAL,\r\n        payload: hours\r\n    })\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { Card, CardBody, CardSubtitle, CardTitle, Table } from 'reactstrap'\r\nimport * as actions from \"../actions/tickValue\"\r\n\r\nconst updateInterval = 60; // in seconds\r\n\r\nconst LatestTicks = ({ fetchLatest, fetchHistorical, values }) => {\r\n\r\n    const [timeLeft, setTimeLeft] = useState(updateInterval);\r\n\r\n    useEffect(() => {\r\n        fetchLatest()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(async () => {\r\n\r\n            if (timeLeft - 1 < 1) {\r\n                fetchLatest();\r\n                await fetchHistorical();\r\n                setTimeLeft(updateInterval);\r\n            } else {\r\n                setTimeLeft(timeLeft - 1 > 0 ? timeLeft - 1 : 0);\r\n            }\r\n\r\n        }, 1000);\r\n        return () => clearTimeout(timer);\r\n    })\r\n\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <CardTitle tag=\"h5\">Latest Values</CardTitle>\r\n                <CardSubtitle className=\"mt-2\">\r\n                    {timeLeft} second{timeLeft > 1 ? 's' : ''} until next update\r\n                </CardSubtitle>\r\n                <Table className=\"mt-4\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Market Symbol</th>\r\n                            <th>Trade Rate</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {values.map((market, i) =>\r\n                            <tr key={i}>\r\n                                <td>{market.symbol}</td>\r\n                                <td>{market.lastTradeRate}</td>\r\n                            </tr>)\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                {(values.length === 0) && <span>Retrieving data...</span>}\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    values: state.tickValue.latest\r\n})\r\n\r\n\r\nconst mapActionToProps = {\r\n    fetchLatest: actions.fetchLatest,\r\n    fetchHistorical: actions.fetchHistorical,\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(LatestTicks);\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { Input, Form, FormGroup, Label, Button } from 'reactstrap'\r\nimport * as actions from \"../actions/tickValue\"\r\n\r\nimport Chart from \"react-apexcharts\";\r\n\r\nimport { mapHistoricalDataDict } from \"../actions/mappers\"\r\n\r\nconst Historical = ({ fetchHistorical, values, historicalHoursBack, updateInterval }) => {\r\n\r\n    useEffect(() => {\r\n        fetchHistorical();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [historicalHoursBack])\r\n\r\n    const mapped = mapHistoricalDataDict(values);\r\n\r\n    return (\r\n        <div>\r\n            <h4>Closing price in the last {historicalHoursBack} hours</h4>\r\n\r\n            <Chart\r\n                options={{\r\n                    chart: {\r\n                        id: \"line\"\r\n                    },\r\n                    stroke: {\r\n                        curve: 'smooth',\r\n                        width: 2\r\n                    },\r\n                    grid: {\r\n                        xaxis: {\r\n                            lines: {\r\n                                show: true\r\n                            }\r\n                        }\r\n                    },\r\n                    xaxis: {\r\n                        labels: {\r\n                            show: false\r\n                        }\r\n                    }\r\n                }}\r\n                series={\r\n                    mapped\r\n                }\r\n                type=\"line\"\r\n                height=\"480\"\r\n\r\n            />\r\n\r\n            <div className=\"mt-4\">\r\n                <Form onSubmit={(e) => {\r\n                    e.preventDefault()\r\n                    const value = e.target[\"hours\"].value\r\n                    if (!parseInt(value) || value < 2 || value > 744) {\r\n                        window.alert(\"Input must be a number between 2 and 744\")\r\n                        return\r\n                    }\r\n                    updateInterval(value)\r\n                }}>\r\n                    <FormGroup>\r\n                        <Label for=\"hours\">Edit Interval:</Label>\r\n                        <Input type=\"hours\" name=\"hours\" id=\"hours\" placeholder={historicalHoursBack} />\r\n                    </FormGroup>\r\n                    <Button>Save</Button>\r\n                </Form>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    values: state.tickValue.historical,\r\n    historicalHoursBack: state.tickValue.historicalHoursBack\r\n})\r\n\r\n\r\nconst mapActionToProps = {\r\n    fetchHistorical: actions.fetchHistorical,\r\n    updateInterval: actions.updateInterval\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(Historical);\r\n","export const mapHistoricalDataDict = (hist) =>\r\n    Object.entries(hist).map((e) => ({ name: e[0], data: e[1].map(values => values.close.toPrecision(6)) }))\r\n","import './App.css';\r\n\r\nimport { store } from \"./actions/store\"\r\nimport { Provider } from \"react-redux\"\r\nimport { ToastProvider } from 'react-toast-notifications';\r\n\r\nimport { Col, Container, Row } from 'reactstrap';\r\nimport LatestTicks from \"./components/LatestTicks\"\r\nimport Historical from \"./components/Historical\"\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ToastProvider autoDismiss={true}>\r\n        <div className=\"App\">\r\n          <Container className=\"mt-4\">\r\n            <Row noGutters={false}>\r\n              <Col xs=\"12\" sm=\"6\">\r\n                <LatestTicks />\r\n              </Col>\r\n              <Col xs=\"12\" sm=\"6\">\r\n                <Historical />\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n\r\n        </div>\r\n      </ToastProvider>\r\n    </Provider >\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}